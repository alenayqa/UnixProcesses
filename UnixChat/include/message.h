#ifndef MESSAGE_H
#define MESSAGE_H

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <stdio.h>


// Ключ разделяемой памяти
#define MSG_SHARED_MEMORY_ID 3003

/*
* ===============================================
 *
* ===============================================
*/


/*
* ===============================================
*   ** СПИСОК ПОЛЬЗОВАТЕЛЕЙ **
 *    
 *  Имеем разделяемый сегмент памяти users
 *  Нулевой элемент - текущее количество пользователей
 *  Далее - последовательность идентификаторов процессов,
 *  обозначающая активность пользователей.
 *  Пользователи нумеруются с единицы, тогда users[i] - pid
 *  пользователя с номером i. Изначально все значения равны -1
 *
 *  При присоединении нового пользователя ищется первая свободная ячейка,
 *  пользователю присваивается соответствующий номер. При отключении
 *  пользователя соответствующая ячейка становится равной -1
 *
 *  При отправке сообщения посылается сигнал всем процессам,
 *  соответствующим активным ячейкам
 *
 *  Максимальное число пользователей - 256
 *   
* ===============================================
*/

#define USERS_SHARED_MEMORY_KEY 3004
#define MAX_USERS 256


// Права доступа
#define PERMS	0666

/* коды сообщений */

#define MSG_TYPE_EMPTY  0 /* пустое сообщение */
#define MSG_TYPE_STRING 1 /* тип сообщения о том, что
                             передана непустая строка */
#define MSG_TYPE_FINISH 2 /* тип сообщения о том, что
                             пора завершать обмен */
#define MAX_STRING	256

// Структура сообщения
typedef struct
{
  int type;
  // Источник (номер процесса, который отправил сообщение)
  int source;
  // Само сообщение
  char text[MAX_STRING];
} message;

#endif
