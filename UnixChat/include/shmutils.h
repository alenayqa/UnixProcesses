#ifndef SHMUTILS_H
#define SHMUTILS_H

// Права доступа
#define PERMS	0666

/*
* ===============================================
 *
* ===============================================
*/

/*
* ===============================================
*   ** СПИСОК ПОЛЬЗОВАТЕЛЕЙ **
 *    
 *  Имеем разделяемый сегмент памяти users
 *  Нулевой элемент - текущее количество пользователей
 *  Далее - последовательность идентификаторов процессов,
 *  обозначающая активность пользователей.
 *  Пользователи нумеруются с единицы, тогда users[i] - pid
 *  пользователя с номером i. Изначально все значения равны -1
 *
 *  При присоединении нового пользователя ищется первая свободная ячейка,
 *  пользователю присваивается соответствующий номер. При отключении
 *  пользователя соответствующая ячейка становится равной -1
 *
 *  При отправке сообщения посылается сигнал всем процессам,
 *  соответствующим активным ячейкам
 *
 *  Максимальное число пользователей - 256
 *   
* ===============================================
*/

#define USERS_SHARED_MEMORY_KEY 3004
#define MAX_USERS 256

/*
* ===============================================
 *   ** СОЗДАНИЕ РАЗДЕЛЯЕМОЙ ПАМЯТИ **
 *       
 *  В начале пытаемся получить доступ
 *  к разделяемой памяти, не создавая её.
 * 
 *  1) Подключение не удалось
 *      В этом случае сегмент разделяемой памяти ещё не был создан
 *      Создаем её и получаем к ней доступ,
 *      После чего задаем начальные
 *      значение: количество пользователей (нулевая
 *      ячейка)  - 0, активность (остальные ячейки) - -1
 * 
 *  2) Доступ получен
 *      Это означает, что разделяемая память уже была создана.
 *      Возвращаем её id
 * 
 *  При успешном получении памяти возвращается id
 *  Иначе: -1
 *   
* ===============================================
*/
int shared_memory_getter();

#endif