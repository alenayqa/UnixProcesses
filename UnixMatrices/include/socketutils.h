#ifndef SOCKETUTILS_H
#define SOCKETUTILS_H

/*
* ===============================================
 *
* ===============================================
*/

#define MATRIX_SOCKET "matrixsocket"
#define MATRIX_PORT 9020

#define CALC_MSG 1
#define END_MSG -1


/*
* ===============================================
 *  ** ЧТЕНИЕ МАССИВА ИЗ ФАЙЛА **
 * 
 *  Функция, которая проходит по файлу и считывает
 *  из него данные
 * 
 *  На вход принимает имя файла и буфер,
 *  куда нужно записать данные. Внутри себя
 *  функция сама выделяет нужное количество
 *  памяти для буфера
 * 
 *  Возвращает целое число - количество
 *  считанных элементов. Если файл не удалось
 *  открыть, возвращается число -1
 * 
* ===============================================
*/
int read_from_file(char *fname, double **buf);


/*
* ===============================================
 *  ** СОЗДАНИИЕ МАТРИЦЫ ИЗ ЛИНЕЙНОГО МАССИВА **
 * 
 *  Чтобы умножить матрицу на вектор, количество
 *  её столбцов должно совпадать с длиной вектора
 * 
 *  На вход подается выпрямленная матрица и
 *  длина вектора. Длина выпрямленной матрицы
 *  обязана делиться на длину вектора, иначе
 *  не получить прямоугольную матрицу
 * 
 *  Если это условие не выполняется, возвращается
 *  нулевой указатель, а иначе указатель на
 *  двумерный массив, соответствующий матрице
 * 
 *  Также в аргументы, переданные через указатель,
 *  записываются получившиеся значения
 *  количества строк и столбцов
 *  
* ===============================================
*/
double** create_matrix(int flatten_matrix_size, int vector_size, double* flatten_matrix, int *rows, int *cols);


/*
* ===============================================
 *  ** СКАЛЯРНОЕ ПРОИЗВЕДЕНИЕ **
 * 
 *  Умножение матрицы на вектор состоит из умножений
 *  каждой строки матрицы на этот вектор
 * 
 *  Если представить строки в виде векторов,
 *  то результат будет равен набору скалярных
 *  произведений строк на вектор
 * 
* ===============================================
*/
double dot(int n, double* v1, double* v2);

#endif